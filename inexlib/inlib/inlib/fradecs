// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_pyrimage
#define inlib_pyrimage

#ifdef INLIB_MEM
#include "mem"
#endif

#include "S_STRING"

namespace inlib {

class fradecs {
  INLIB_SCLASS(inlib::fradecs)
public:
  fradecs():m_sid() {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    for(unsigned int i=0;i<8;i++) m_vals[i] = 0;
  }
  fradecs(const std::string& a_sid,const double a_vals[8]):m_sid(a_sid) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    for(unsigned int i=0;i<8;i++) m_vals[i] = a_vals[i];
  }
  virtual ~fradecs(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  fradecs(const fradecs& a_from):m_sid(a_from.m_sid) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    for(unsigned int i=0;i<8;i++) m_vals[i] = a_from.m_vals[i];
  }
  fradecs& operator=(const fradecs& a_from){
    m_sid = a_from.m_sid;
    for(unsigned int i=0;i<8;i++) m_vals[i] = a_from.m_vals[i];
    return *this;
  }
public:
  const std::string& sid() const {return m_sid;}
  void get_corners(double a_vals[8]) const {for(unsigned int i=0;i<8;i++) a_vals[i] = m_vals[i];}
protected:
  std::string m_sid;
  double m_vals[8];
};

/*
class fradecss : public std::vector<fradecs> {
  typedef std::vector<fradecs> parent;
public:
  INLIB_SCLASS(inlib::fradecss)
public:
  fradecss():parent(){}
  virtual ~fradecss(){}
public:
  fradecss(const fradecss& a_from):parent(a_from){}
  fradecss& operator=(const fradecss& a_from){parent::operator=(a_from);return *this;}
};
*/

}

#include "cstr"
#include "file"

namespace inlib {

inline bool read_fradecs(const std::string& a_csv,std::vector<fradecs>& a_vec) {
  a_vec.clear();
  FILE* file = ::fopen(a_csv.c_str(),"rb");
  if(!file) return false;
  unsigned int BUFSIZE = 65536;
  char* buffer = new char[BUFSIZE+1];
  if(!buffer) {::fclose(file);return false;}

  bool status = true;

  char* olcn = beg_LC_NUMERIC();

  char* beg;
  char* end;
  char* pos;
  char* fname;
  double vals[8];
  while(true) {
    size_t l;
    if(!file::read_cstring(file,buffer,BUFSIZE,l)) break; // EOF.

    fname = buffer;
   {pos = ::strchr(fname,',');
    if(!pos) {status=false;break;}
    *pos = 0;}

    for(unsigned int i=0;i<7;i++) {
      beg = pos+1;
      pos = ::strchr(beg,',');
      if(!pos) {status=false;break;}
      *pos = 0;
      vals[i] = ::strtod(beg,&end);
      if(end==beg) {status=false;break;}
    }
    if(!status) break;

   {beg = pos+1;
    vals[7] = ::strtod(beg,&end);
    if(end==beg) {status=false;break;}}

    //::printf("debug : read_fradecs : %s : (%g,%g), (%g,%g), (%g,%g), (%g,%g)\n",fname,
    //    vals[0],vals[1],vals[2],vals[3],vals[4],vals[5],vals[6],vals[7]);

    a_vec.push_back(fradecs(fname,vals));

  }

  end_LC_NUMERIC(olcn);

  if(!status) a_vec.clear();
  delete [] buffer;
  ::fclose(file);
  return status;
}

}

#endif
