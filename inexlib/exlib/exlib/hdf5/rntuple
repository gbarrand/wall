// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_hdf5_rntuple
#define exlib_hdf5_rntuple

// a class inheriting inlib::read::icol,intuple for ioda ntuple reader navigation.

#include <inlib/rntuple>

#include "store"

#include <inlib/vfind>
#include <inlib/vmanip>
#include <inlib/ntuple_binding>
#include <inlib/ntuple_booking>
#include <inlib/sout>
#include <inlib/scast>
#include <inlib/forit>
#include <inlib/stype>
#include <inlib/mnmx>
#include <inlib/vdata>

#ifdef INLIB_MEM
#include <inlib/mem>
#include <inlib/stype>
#endif

namespace exlib {
namespace hdf5 {

class rntuple : public virtual inlib::read::intuple, public store {
public:
  static const std::string& s_class() {
    static const std::string s_v("exlib::hdf5::rntuple");
    return s_v;
  }
  virtual const std::string& s_cls() const {return s_class();}
public:
  template <class T,class ST> //ST = storage type.
  class column_ref : public virtual inlib::read::icolumn<T> {
    //typedef read::icolumn<T> parent;
#ifdef INLIB_MEM
    static const std::string& s_class() {
      static const std::string s_v("exlib::hdf5::rntuple::column_ref<"+inlib::stype(T())+">");
      return s_v;
    }
#endif
/*
  public:  //inlib::read::icol
    static inlib::cid id_class() {
      static const T s_v = T(); //do that for T = std::string.
      return 200+inlib::_cid(s_v)+10000;
    }
    virtual void* cast(inlib::cid a_class) const {
      if(void* p = inlib::cmp_cast<column_ref>(this,a_class)) {return p;}
      return parent::cast(a_class);
    }
    virtual inlib::cid id_cls() const {return id_class();}
    */
  public: //inlib::read::icol
    virtual const std::string& name() const {return m_name;}
    virtual void stop() {}
    virtual bool fetch_entry() const { //read.
      column_ref& self = const_cast<column_ref&>(*this);
      if(m_basket_pos>=m_basket_end) { //we need more data.
        if(m_branch.pos()>=m_branch.entries()) {
          //m_store.out() << "exlib::hdf5::rntuple::column_ref:fetch_entry : no more data." << std::endl;
          self.m_basket_pos = 0;
          self.m_basket_end = 0;
          return false;
	}	
	if(m_want_new_basket_size) {
	  delete [] self.m_basket;
	  self.m_basket = new ST[m_want_new_basket_size];
	  self.m_basket_pos = 0;
	  self.m_basket_size = m_want_new_basket_size;
	  self.m_want_new_basket_size = 0;
	}	
        inlib::uint64 remain = m_branch.entries()-m_branch.pos();
        size_t n = inlib::mn<size_t>((size_t)remain,m_basket_size);
        if(!m_branch.read_page<ST>(n,m_basket)) {
          m_store.out() << "exlib::hdf5::rntuple::column_ref:fetch_entry : read_page() failed." << std::endl;
          self.m_basket_pos = 0;
          self.m_basket_end = 0;
          return false;
        }
        self.m_basket_pos = 0;
        self.m_basket_end = n;	
      }
      self.m_ref = m_basket[m_basket_pos];
      self.m_basket_pos++;
      return true;
    }
  public: //inlib::read::icolumn
    virtual bool get_entry(T& a_value) const {
      a_value = T(m_ref);
      return true;
    }
  public:
    column_ref(store& a_store,pages& a_pages,const std::string& a_name,size_t a_basket_size,ST& a_ref)
    :m_store(a_store)
    ,m_branch(a_pages)
    ,m_name(a_name)
    ,m_ref(a_ref)
    ,m_basket_size(a_basket_size?a_basket_size:32000)
    ,m_basket_pos(0)
    ,m_basket_end(0) //read.
    ,m_basket(0)
    ,m_want_new_basket_size(0)
    {
#ifdef INLIB_MEM
      inlib::mem::increment(s_class().c_str());
#endif
      m_basket = new ST[m_basket_size];
      inlib::uint64 _entries = m_branch.entries();
      size_t n = inlib::mn<size_t>((size_t)_entries,m_basket_size);
      if(_entries) {
        if(!m_branch.read_page<ST>(n,m_basket)) {
          m_store.out() << "exlib::hdf5::rntuple::column_ref:column_ref : read_page() failed." << std::endl;
          m_basket_pos = 0;
          m_basket_end = 0;
          return;
        }
      }
      m_basket_pos = 0;
      m_basket_end = n;
    }
    virtual ~column_ref(){
      delete [] m_basket;
#ifdef INLIB_MEM
      inlib::mem::decrement(s_class().c_str());
#endif
    }
  protected:
    column_ref(const column_ref& a_from)
    :inlib::read::icol(a_from)
    ,m_store(a_from.m_store)
    ,m_branch(a_from.m_branch)
    ,m_name(a_from.m_name)
    ,m_ref(a_from.m_ref)
    ,m_basket_size(a_from.m_basket_size)
    ,m_basket_pos(0)
    ,m_basket_end(0)
    ,m_basket(0)
    ,m_want_new_basket_size(0)
    {}
    column_ref& operator=(const column_ref& a_from){
      if(&a_from==this) return *this;
      m_name = a_from.m_name;
      m_basket_size = a_from.m_basket_size;
      m_basket_pos = 0;      
      m_basket_end = 0;
      m_want_new_basket_size = 0;
      return *this;
    }
  protected:
    store& m_store;
    pages& m_branch;
    std::string m_name;
    ST& m_ref;
    size_t m_basket_size;
    size_t m_basket_pos;
    size_t m_basket_end;
    ST* m_basket;
    size_t m_want_new_basket_size;
  };

  template <class T,class ST> //ST = storage type.
  class column : public column_ref<T,ST> {
    typedef column_ref<T,ST> parent;
#ifdef INLIB_MEM
    static const std::string& s_class() {
      static const std::string s_v("exlib::hdf5::rntuple::column<"+inlib::stype(T())+">");
      return s_v;
    }
#endif
/*
  public:
    static inlib::cid id_class() {
      static const T s_v = T(); //do that for T = std::string.
      return 200+inlib::_cid(s_v);
    }
    virtual void* cast(inlib::cid a_class) const {
      if(void* p = inlib::cmp_cast<column>(this,a_class)) {return p;}
      return parent::cast(a_class);
    }
    virtual inlib::cid id_cls() const {return id_class();}*/
  public:
    column(store& a_store,pages& a_pages,const std::string& a_name,size_t a_basket_size)
    :parent(a_store,a_pages,a_name,a_basket_size,m_tmp)  //m_tmp is a ST.
    ,m_tmp(ST())
    {
#ifdef INLIB_MEM
      inlib::mem::increment(s_class().c_str());
#endif
    }
    virtual ~column(){
#ifdef INLIB_MEM
      inlib::mem::decrement(s_class().c_str());
#endif
    }
  protected:
    column(const column& a_from)
    :inlib::read::icol(a_from)
    ,parent(a_from)
    ,m_tmp(a_from.m_tmp)
    {}
    column& operator=(const column& a_from){
      if(&a_from==this) return *this;
      parent::operator=(a_from);
      m_tmp = a_from.m_tmp;
      return *this;
    }
  protected:
    ST m_tmp;
  };

  INLIB_CLASS_STRING_VALUE(vector_char,vector<char>)
  INLIB_CLASS_STRING_VALUE(vector_short,vector<short>)
  INLIB_CLASS_STRING_VALUE(vector_int,vector<int>)
  INLIB_CLASS_STRING_VALUE(vector_float,vector<float>)
  INLIB_CLASS_STRING_VALUE(vector_double,vector<double>)
  
  INLIB_CLASS_STRING_VALUE(string,string)
  
  INLIB_CLASS_STRING_VALUE(vector_int64,vector<inlib::int64>)
  INLIB_CLASS_STRING_VALUE(vector_uchar,vector<inlib::uchar>)
  INLIB_CLASS_STRING_VALUE(vector_ushort,vector<inlib::ushort>)
  INLIB_CLASS_STRING_VALUE(vector_uint32,vector<inlib::uint32>)
  INLIB_CLASS_STRING_VALUE(vector_uint64,vector<inlib::uint64>)

public: //inlib::read::intuple :
  virtual void start() {
    inlib_vforcit(pages*,m_pagess,it) (*it)->reset_pos();
    m_start_next_index = 0;
    if(!entries(m_start_next_rows)) {}
  }
  virtual bool next() {
    if(m_start_next_index>=m_start_next_rows) return false;
    m_start_next_index++;
    return get_row();
  }  
  virtual inlib::read::icol* find_icol(const std::string& a_name) {return inlib::find_named<inlib::read::icol>(m_cols,a_name);}
  virtual const std::vector<inlib::read::icol*>& columns() const {return m_cols;}
  virtual const std::string& title() const {return m_title;}
  virtual void stop() {}
  virtual bool number_of_entries(inlib::uint64 & a_value) const {return entries(a_value);}
public:
  rntuple(std::ostream& a_out,hid_t a_group,const std::string& a_name,bool a_enforce_double = false)
  :store(a_out,a_group,a_name,false,0)  //false=read
  ,m_start_next_rows(0)
  ,m_start_next_index(0)
  {
    inlib_vforcit(pages*,m_pagess,it){

#define EXLIB_HDF5_NTUPLE_READ_CREATE_COL(a__type) \
      if((*it)->form()==inlib::stype(a__type())) {\
        if(a_enforce_double) {\
          column<double,a__type>* col = new column<double,a__type>(*this,*(*it),(*it)->name(),0);\
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return;}\
          m_cols.push_back(col);\
        } else {\
          column<a__type,a__type>* col = new column<a__type,a__type>(*this,*(*it),(*it)->name(),0);\
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return;}\
          m_cols.push_back(col);\
        }\
      }

           EXLIB_HDF5_NTUPLE_READ_CREATE_COL(char)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(short)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(int)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(inlib::int64)
      
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(float)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(double)
      
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(inlib::byte)      
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(inlib::ushort)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(inlib::uint32)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(inlib::uint64)

    //else EXLIB_HDF5_NTUPLE_READ_CREATE_COL(bool) //use byte=uchar.
/*    
      else
      if((*it)->form()==s_string()) {
        column_string* col = new column_string(*this,*(*it),(*it)->name(),0);
        if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return;}
        m_cols.push_back(col);
      }

#define EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(a__vec_type,a__type) \
      if((*it)->form()==s_vector_##a__vec_type()) {\
        std_vector_column<a__type>* col = new std_vector_column<a__type>(*this,*(*it),(*it)->name(),0);\
        if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return;}\
        m_cols.push_back(col);\
      }
	
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(char,char)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(short,short)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(int,int)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(int64,inlib::int64)
      
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(float,float)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(double,double)
      
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(uchar,inlib::uchar)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(ushort,inlib::ushort)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(uint32,inlib::uint32)
      else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(uint64,inlib::uint64)

//    else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(std::string)
//    else EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL(bool) //use byte=uchar.
*/
      else {
        m_out << "exlib::hdf5::rntuple::rntuple :"
              << " warning : for column " << inlib::sout((*it)->name())
              << ", type " << inlib::sout((*it)->form()) << " not handled."
              << std::endl;
        //inlib::safe_clear<inlib::read::icol>(m_cols);
        //return;
      }
    }
//#undef EXLIB_HDF5_NTUPLE_READ_CREATE_VEC_COL
#undef EXLIB_HDF5_NTUPLE_READ_CREATE_COL
  }

  rntuple(std::ostream& a_out,hid_t a_group,const std::string& a_name,const inlib::ntuple_binding& a_bd)
  :store(a_out,a_group,a_name,false,0)  //false=read
  ,m_start_next_rows(0)
  ,m_start_next_index(0)
  {
    if(!initialize(a_out,a_bd)) {}
  }

  virtual ~rntuple() {
    inlib::safe_clear<inlib::read::icol>(m_cols);
  }
protected:
  rntuple(const rntuple& a_from)
  :inlib::read::intuple(a_from),store(a_from)
  ,m_title(a_from.m_title),m_start_next_rows(0),m_start_next_index(0)
  {}
  rntuple& operator=(const rntuple&){return *this;}
public:
  bool initialize(std::ostream& a_out,const inlib::ntuple_binding& a_bd = inlib::ntuple_binding(),bool a_enforce_double = false) {
    inlib::safe_clear<inlib::read::icol>(m_cols);
   {inlib_vforcit(pages*,m_pagess,it) (*it)->reset_pos();}
    
    inlib_vforcit(pages*,m_pagess,it) {
    
#define EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(a__type) \
      if((*it)->form()==inlib::stype(a__type())) {\
        a__type* user_var = a_bd.find_variable<a__type>((*it)->name());\
        if(user_var) {\
          column_ref<a__type,a__type>* col = new column_ref<a__type,a__type>(*this,*(*it),(*it)->name(),0,*user_var);\
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}\
          m_cols.push_back(col);\
	} else {\
          if(a_enforce_double) {\
            column<double,a__type>* col = new column<double,a__type>(*this,*(*it),(*it)->name(),0);\
            if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}\
            m_cols.push_back(col);\
          } else {\
            column<a__type,a__type>* col = new column<a__type,a__type>(*this,*(*it),(*it)->name(),0);\
            if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}\
            m_cols.push_back(col);\
          }\
	}\
      }

/*
#define EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(a__vec_type,a__type) \
      if((*it)->form()==s_vector_##a__vec_type()) {\
        std::vector<a__type>* user_var = a_bd.find_variable< std::vector<a__type> >((*it)->name());\
	if(user_var) {\
          std_vector_column_ref<a__type>* col = \
	    new std_vector_column_ref<a__type>(*this,*(*it),(*it)->name(),0,*user_var);\
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}\
          m_cols.push_back(col);\
	} else {\
          std_vector_column<a__type>* col = new std_vector_column<a__type>(*this,*(*it),(*it)->name(),0);\
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}\
          m_cols.push_back(col);\
	}\
      }
*/

           EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(char)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(short)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(int)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(inlib::int64)
      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(float)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(double)
      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(inlib::byte)      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(inlib::ushort)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(inlib::uint32)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(inlib::uint64)

    //else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL(bool) //use byte=uchar.
/*    
      else
      if((*it)->form()==s_string()) {
        std::string* user_var = a_bd.find_variable<std::string>((*it)->name());
	if(user_var) {
          column_string_ref* col = new column_string_ref(*this,*(*it),(*it)->name(),0,*user_var);
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}
          m_cols.push_back(col);
	} else {
          column_string* col = new column_string(*this,*(*it),(*it)->name(),0);
          if(!col) {inlib::safe_clear<inlib::read::icol>(m_cols);return false;}
          m_cols.push_back(col);
        }
      }
      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(char,char)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(short,short)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(int,int)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(int64,inlib::int64)
      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(float,float)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(double,double)
      
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(uchar,inlib::uchar)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(ushort,inlib::ushort)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(uint32,inlib::uint32)
      else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(uint64,inlib::uint64)

//    else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(std::string)
//    else EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL(bool) //use byte=uchar.
*/
      else {
        a_out << "exlib::hdf5::rntuple::rntuple(read with binding) :"
              << " for column " << inlib::sout((*it)->name())
              << ", type " << inlib::sout((*it)->form()) << " not yet handled."
              << std::endl;
        inlib::safe_clear<inlib::read::icol>(m_cols);
        return false;
      }
    }
//#undef EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_VEC_COL
#undef EXLIB_HDF5_NTUPLE_READ_BINDING_CREATE_COL
    return true;
  }

protected:
  bool get_row() const {
    bool status = true;
    inlib_vforcit(inlib::read::icol*,m_cols,it) {
      if(!(*it)->fetch_entry()) status = false;
    }
    return status;
  }

protected:
  std::string m_title;
  std::vector<inlib::read::icol*> m_cols;
  inlib::uint64 m_start_next_rows;
  inlib::uint64 m_start_next_index;
};

}}

//exlib_build_use inlib hdf5

#endif
