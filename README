
  To build :
    UNIX> cd <app>/mgr
    UNIX> ./build
  ( UNIX> ./build -v )
  ( UNIX> ./build -parallel )
    
 (here UNIX is for Linux, macOS, Windows-10/cygwin)

  If the GNU parallel application is known from your prompt, you can use the "-parallel"
 option so that C and C++ file compilations are distributed on your cores. This feature
 had been tested with success on macOS with a MacPorts installation of the GNU parallel program
 and on centos7 by using the GNU distribution. Since good part of the code of our
 apps is pure header, it will not boost the "main" part of them, but it clearly boosts the
 build of the ourex externals.

///////////////////////////////////////////////////////////////////////////////////////////////////////
/// IMPORTANT : ///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
  A touchy point is to customize the mgr/run and mgr/install scripts to take care of your computers configuration.

  By default the run script will use on your local machine the mgr/config_local_21 configuration file.
 It will launch the wall_master program and two wall_screnn programs by using the PORT 50730 to establish
 connections between master and slaves.

  If using multiple computers, use for example the mgr/config_lal_9 as a template to define your own configuration.
 For installing/deploying on your computers, take a look under the "if [ "$1" = "wall" ] ; then" section of the
 mgr/install to see how we do at LAL. Note that the run script expects that the distribution is installed under
 the same path for all machines. The scripts expect that ssh can connect on your machines without having to type
 a password.

  At end of the build, you should have a distribution file :
    bin_<config>/distrib/<app>-<version>-<platform>.zip

 If having customized the mgr/install script, a "./install wall" should copy and unzip the upper on all
 your machines under the same path (/usr/local/wall/<version> by default).

///////////////////////////////////////////////////////////////////////////////////////////////////////
/// run : /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

  After installation, for example under /usr/local/wall, do :
    UNIX> /usr/local/wall/<version>/bin/run

  If things are configured properly, the wall_master program should show its window on the master machine
 and all the wall_screen programs their own one on the slave machines.

  If you have not done any configuration, the run script should show on your local machine the window of
 the master on the upper top area of your screen, and the two windows, side by side, of two slaves on the
 bottom area of your screen.

  Moving the mouse on the master window should be reflected by a red cross cursor on the slave windows.
 Use this to point and activate items in the main menu appearing in one of a slave window (in principle
 the lower left one). As for other apps, the bottom area of the window owning the main menu can be used
 to pass from menu mode to "full view" mode. The general behaviour is the same than for the pmx, ioda, etc...
 apps, except that the "view mode" takes all your screens! (or slave windows if running locally).

  See the <app> section on http://gbarrand.github.io for more.

